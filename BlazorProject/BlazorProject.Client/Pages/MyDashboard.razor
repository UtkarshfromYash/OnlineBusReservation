@page "/mydashboard"
@using BlazorProject.Client.Services
@using BlazorProject.Models.Models
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject LocalStorageService _service;
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
<div class="container">
    <!-- Header Section -->
    <header class="header">
        <nav>
            <ul>
                <li><a href="/">Home</a></li>
            </ul>

            <!-- User Profile and Logout -->
            <div class="user-info">
    @if (!string.IsNullOrEmpty(UserName))
    {
        <span class="username">@UserName</span>
        <button class="btn-logout" @onclick="Logout">Logout</button>
    }
    else
    {
        <span class="username">Guest</span>
    }
</div>
        </nav>
    </header>

    <!-- Main Content Area -->
    <div class="content">
        <div class="main-content">
            <!-- Dashboard Cards -->
            <div class="dashboard-cards">
                <!-- Bookings Card -->
                <div class="card bookings">
                    <h4>Bookings</h4>
                    <p>View and manage your bus bookings.</p>
                    <a href="/mydashboard/bookings" class="btn btn-primary">Go to Bookings</a>
                </div>

                <!-- Profile Card -->
                <div class="card profile">
                    <h4>Profile</h4>
                    <p>View and update your profile information.</p>
                    <a href="/mydashboard/profile" class="btn btn-primary">Go to Profile</a>
                </div>

                <!-- Change Password Card -->
                <div class="card change-password">
                    <h4>Change Password</h4>
                    <p>Change your account password.</p>
                    <a href="/mydashboard/changepassword" class="btn btn-primary">Go to Change Password</a>
                </div>

                <!-- Wallet Card -->
                <div class="card wallet">
                    <h4>Wallet</h4>
                    <p>View and manage your wallet balance.</p>
                    <a href="/mydashboard/wallet" class="btn btn-primary">Go to Wallet</a>
                </div>
            </div>
        </div>
    </div>

</div>

<style>
    /* Global styles for the body */
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
    }

    /* Styles for Dashboard */
    .container {
        display: flex;
        flex-direction: column;
        height: 100vh;  /* Use full viewport height */
        padding: 0px !important;
    }

    /* Header styling */
    .header {
        background-color: #333;
        padding: 15px;
        color: white;
        display: flex;
        justify-content: space-between; /* Align items to left and right */
        align-items: center;
    }

    .header nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
    }

    .header nav ul li {
        margin-right: 20px;
    }

    .header nav ul li a {
        color: white;
        text-decoration: none;
    }

    /* User Info Section */
    .user-info {
        display: flex;
        align-items: center;
    }

    .username {
        color: white;
        margin-right: 10px;
        font-size: 16px;
    }

    .btn-logout {
        background-color: #ff4b5c;
        color: white;
        border: none;
        padding: 8px 15px;
        font-size: 14px;
        cursor: pointer;
        border-radius: 5px;
    }

    .btn-logout:hover {
        background-color: #e03e4d;
    }

    /* Content layout */
    .content {
        display: flex;
        flex: 1;  /* This makes the content section take the remaining height */
        padding: 20px;
    }

    .sidebar {
        width: 200px;
        background-color: #f4f7fc;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .sidebar ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .sidebar ul li {
        margin-bottom: 10px;
    }

    .sidebar ul li a {
        text-decoration: none;
        color: #0066cc;
    }

    .sidebar ul li a:hover {
        text-decoration: underline;
    }

    .main-content {
        flex: 1;
        margin-left: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    /* Footer styling */
    footer {
        background-color: #333;
        color: white;
        text-align: center;
    }

    /* Dashboard Cards */
    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Makes cards responsive */
        gap: 20px;
        padding: 20px;
        background-image: url('./images/mydashboard.jpg');
    }

    /* Common Card Styling */
    .card {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        transition: all 0.3s ease;
        height: 200px;
        /* Placeholder for background image */
        background-size: cover;
        background-position: center;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .card h4 {
        font-size: 20px;
        margin-bottom: 10px;
    }

    .card p {
        font-size: 14px;
        color: #666;
        margin-bottom: 20px;
    }

    .btn-primary {
        background-color: #0066cc;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        text-decoration: none;
        font-weight: 500;
        transition: background-color 0.3s;
    }

    .btn-primary:hover {
        background-color: #005bb5;
    }
</style>
@code {
 public string UserName { get; set; }
 private User user = new User();
  protected override async Task OnAfterRenderAsync(bool firstrender)
{
    if(firstrender)
    {
         @* await JSRuntime.InvokeVoidAsync("logLocalStorage"); // Log local storage value *@
        var user = await logLocalStorage();
        if (user!=null)
        {
            try
            {
                UserName = user.FirstName;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deserializing: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("User  JSON is null or empty.");
        }
    }
    }
private void Logout()
    {
        // Logic to log the user out (e.g., clear local storage, session, etc.)
        // After logout, redirect to the login page
        NavigationManager.NavigateTo("/login");
    }

    private async Task<User> logLocalStorage()
    {
        var user = await _service.GetItem<User>("user");
        Console.WriteLine($"User: {JsonSerializer.Serialize(user)}");
        return user;
    }
}

@page "/adduser"
@using BlazorProject.Models.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

<div class="container">
    <div class="form-container">
        <h2>Register</h2>
        <EditForm Model="@_addUserModel" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="name">First Name</label>
                <InputText id="name" class="form-control" @bind-Value="_addUserModel.FirstName" />
                <ValidationMessage For="@(() => _addUserModel.FirstName)" />
            </div>

            <div class="form-group mb-3">
                <label for="lastname">Last Name</label>
                <InputText id="lastname" class="form-control" @bind-Value="_addUserModel.LastName" />
                <ValidationMessage For="@(() => _addUserModel.LastName)" />
            </div>

            <div class="form-group mb-3">
                <label for="username">Email</label>
                <InputText id="username" class="form-control" @bind-Value="_addUserModel.Email" />
                <ValidationMessage For="@(() => _addUserModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="_addUserModel.Password" />
                <ValidationMessage For="@(() => _addUserModel.Password)" />
            </div>

            <div class="form-group mb-3">
                <label for="role">Role</label>
                <InputSelect id="role" class="form-control" @bind-Value="_addUserModel.Role">
                    <option value="Admin">Admin</option>
                    <option value="Customer">Customer</option>
                </InputSelect>
                <ValidationMessage For="@(() => _addUserModel.Role)" />
            </div>

            <div class="form-group mb-3">
                <label for="gender">Gender</label>
                <InputSelect id="gender" class="form-control" @bind-Value="_addUserModel.Gender">
                    <option value="">Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => _addUserModel.Gender)" />
            </div>

            <div class="form-group mb-3">
                <label for="ContactNo">Contact</label>
                <InputText id="ContactNo" class="form-control" @bind-Value="_addUserModel.ContactNo" />
                <ValidationMessage For="@(() => _addUserModel.ContactNo)" />
            </div>

            <div class="form-group mb-3">
                <label for="Address">Address</label>
                <InputText id="Address" class="form-control" @bind-Value="_addUserModel.Address" />
                <ValidationMessage For="@(() => _addUserModel.Address)" />
            </div>

            <div class="form-group mb-3">
                <label for="DateOfBirth">Date Of Birth</label>
                <InputDate id="DateOfBirth" class="form-control" @bind-Value="_addUserModel.DateofBirth" />
                <ValidationMessage For="@(() => _addUserModel.DateofBirth)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                @if (_isSaving)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save</span>
                }
            </button>
        </EditForm>
    </div>
</div>


@code {
    private AddUpdateModel _addUserModel = new AddUpdateModel();
    private bool _isSaving = false;

    private async Task Save()
    {
        try
        {
            _isSaving = true;
            var response = await Http.PostAsJsonAsync("api/User/register", _addUserModel);
            
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User  added successfully");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to add user: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
        finally
        {
            _isSaving = false;
        }
    }
}
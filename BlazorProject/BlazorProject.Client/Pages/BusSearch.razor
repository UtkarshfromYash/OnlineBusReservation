@page "/bus-search"
@using BlazorProject.Client.Services
@using BlazorProject.Models.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject LocalStorageService _service
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

<style>
    .clickable-row {
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .clickable-row:hover {
        background-color: #f0f0f0 !important;
    }
</style>

<div class="container mt-4">
    <h2>Search Buses</h2>
    
    <EditForm Model="@searchModel" OnValidSubmit="@HandleSearch">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label>From</label>
                    <InputText @bind-Value="searchModel.Source" class="form-control" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label>To</label>
                    <InputText @bind-Value="searchModel.Destination" class="form-control" />
                </div>
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary mt-4">Search</button>
            </div>
        </div>
    </EditForm>

    @if (busSchedules != null)
    {
        @if (busSchedules.Any())
        {
            <div class="table-responsive mt-4">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Schedule ID</th>
                            <th>Bus</th>
                            <th>Type</th>
                            <th>Departure</th>
                            <th>Arrival</th>
                            <th>Seats</th>
                            <th>Fare</th>
                            <th>Duration</th>
                            <th>Features</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var bus in busSchedules)
                        {
                            <tr @onclick="() => HandleRowClick(bus)" class="clickable-row">
                                <td>@bus.ScheduleID</td>
                                <td>@bus.BusName</td>
                                <td>@bus.BusType</td>
                                <td>@bus.DepartureTimeFormatted</td>
                                <td>@bus.ArrivalTimeFormatted</td>
                                <td>@bus.AvailableSeats/@bus.TotalSeats</td>
                                <td>@bus.FareFormatted</td>
                                <td>@bus.JourneyDuration</td>
                                <td>@bus.Features</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => HandleBookNowClick(bus)">
                                        Book Now 
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info mt-4">
                No buses found for the selected route.
            </div>
        }
    }
</div>

@code {
    private BusScheduleSearchModel searchModel = new();
    private IEnumerable<BusScheduleViewModel> busSchedules;
    private int scheduleID { get; set; }
    private User currentUser;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is logged in when component initializes
        currentUser = await _service.GetItem<User>("user");
    }

    private async Task HandleSearch()
    {
        busSchedules = await Http.GetFromJsonAsync<IEnumerable<BusScheduleViewModel>>($"api/BusSchedule?source={searchModel.Source}&destination={searchModel.Destination}");
    }

    private async Task HandleRowClick(BusScheduleViewModel bus)
    {
        await HandleNavigation(bus);
    }

    private async Task HandleBookNowClick(BusScheduleViewModel bus)
    {
        await HandleNavigation(bus);
    }

    private async Task HandleNavigation(BusScheduleViewModel bus)
    {
        // Check if user is logged in
        if (currentUser == null)
        {
            // Store the intended destination for after login
            await _service.SetItem<int>("pendingScheduleID", bus.ScheduleID);
            NavigationManager.NavigateTo("/login");
            return;
        }

        // User is logged in, proceed with booking
        scheduleID = bus.ScheduleID;
        await _service.SetItem<int>("scheduleID", scheduleID);
        NavigationManager.NavigateTo("/book-now");
    }
}
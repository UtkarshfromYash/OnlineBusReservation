@page "/login"
@using BlazorProject.Models.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

<div class="container mt-5">
    <div class="form-container">
        <h2>Log In</h2>
        <EditForm Model="@_login" OnSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="_login.Email" />
                <ValidationMessage For="@(() => _login.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="_login.Password" />
                <ValidationMessage For="@(() => _login.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
        <a href="#">Forgot your password?</a>
    </div>
</div>

<footer>
    <p>
        Created with <i class="fa fa-heart"></i> by
        <a target="_blank" href="https://florin-pop.com">Florin Pop</a>
        - Read how I created this and how you can join the challenge
        <a target="_blank" href="https://www.florin-pop.com/blog/2019/03/double-slider-sign-in-up-form/">here</a>.
    </p>
</footer>

@code {
    private LoginModel _login = new LoginModel();

    private async Task Submit()
    {
        // Create a login model to send credentials
        try 
        {
            var response = await Http.PostAsJsonAsync("api/User/login", _login);
            Console.WriteLine("Status Code "+response.StatusCode);
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<User>();
                
                if (user != null)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Login Successful");
                    JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", user);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Login Failed");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Login Failed");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}